// Generated by Karakum - do not modify it manually!


package fluentui

import react.Dispatch
import react.MutableRefObject
import web.html.HTMLElement
import web.uievents.MouseEvent

// unhandled import: ActiveDescendantContextValue from "@fluentui/react-aria" 
// unhandled import: ActiveDescendantImperativeRef from "@fluentui/react-aria" 
// unhandled import: ComponentProps from "@fluentui/react-utilities" 
// unhandled import: ComponentState from "@fluentui/react-utilities" 
// unhandled import: ContextSelector from "@fluentui/react-context-selector" 
// unhandled import: FC from "react" 
// unhandled import: ForwardRefComponent from "@fluentui/react-utilities" 
// unhandled import: PortalProps from "@fluentui/react-portal" 
// unhandled import: PositioningShorthand from "@fluentui/react-positioning" 
// unhandled import: Provider from "react" 
// unhandled import: ProviderProps from "react" 
// unhandled import: Slot from "@fluentui/react-utilities" 
// unhandled import: SlotClassNames from "@fluentui/react-utilities" 

/**
 * State used in rendering Combobox
 */

sealed external interface ComboboxBaseState : Required<ComboboxBaseProps>, ComboboxBaseProps {
    /**
     * @deprecated - no longer used internally
     */
    var activeOption: dynamic

    /**
     * @deprecated - no longer used internally and handled automatically be activedescendant utilities
     * @see ACTIVEDESCENDANT_FOCUSVISIBLE_ATTRIBUTE for writing styles involving focusVisible
     */
    var focusVisible: Boolean

    /**
     * @deprecated - no longer used internally
     * Whether the next blur event should be ignored, and the combobox/dropdown will not close.
     */
    var ignoreNextBlur: MutableRefObject<Boolean>

    /**
     * @deprecated - no longer used internally
     */
    var setActiveOption: Dispatch<Any>

    /**
     * @deprecated - no longer used internally and handled automatically be activedescendant utilities
     * @see useSetKeyboardNavigation for imperatively setting focus visible state
     */
    fun setFocusVisible(focusVisible: Boolean): Unit

    /**
     * whether the combobox/dropdown currently has focus
     */
    var hasFocus: Boolean
    fun setHasFocus(hasFocus: Boolean): Unit
    fun setOpen(event: ComboboxBaseOpenEvents, newState: Boolean): Unit
    fun setValue(newValue: String?): Unit
    var onOptionClick: (e: MouseEvent<HTMLElement>) -> Unit
}
