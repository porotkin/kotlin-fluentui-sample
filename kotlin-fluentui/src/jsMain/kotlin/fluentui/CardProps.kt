// Generated by Karakum - do not modify it manually!


package fluentui

// unhandled import: ComponentProps from "@fluentui/react-utilities" 
// unhandled import: ComponentState from "@fluentui/react-utilities" 
// unhandled import: ForwardRefComponent from "@fluentui/react-utilities" 
// unhandled import: Slot from "@fluentui/react-utilities" 
// unhandled import: SlotClassNames from "@fluentui/react-utilities" 

/**
 * Card component props.
 */

sealed external interface CardProps : CardSlots {
    /**
     * Sets the appearance of the card.
     *
     * `filled`
     * The card will have a shadow, border and background color.
     *
     * `filled-alternative`
     * This appearance is similar to `filled`, but the background color will be a little darker.
     *
     * `outline`
     * This appearance is similar to `filled`, but the background color will be transparent and no shadow applied.
     *
     * `subtle`
     * This appearance is similar to `filled-alternative`, but no border is applied.
     *
     * @default 'filled'
     */
    var appearance: (Temp169)?

    /**
     * Sets the focus behavior for the card.
     *
     * `off`
     * The card will not focusable.
     *
     * `no-tab`
     * This behaviour traps the focus inside of the Card when pressing the Enter key and will only release focus when
     * pressing the Escape key.
     *
     * `tab-exit`
     * This behaviour traps the focus inside of the Card when pressing the Enter key but will release focus when pressing
     * the Tab key on the last inner element.
     *
     * `tab-only`
     * This behaviour will cycle through all elements inside of the Card when pressing the Tab key and then release focus
     * after the last inner element.
     *
     * @default 'off'
     */
    var focusMode: (Temp170)?

    /**
     * Defines the orientation of the card.
     *
     * @default 'vertical'
     */
    var orientation: (Temp171)?

    /**
     * Controls the card's border radius and padding between inner elements.
     *
     * @default 'medium'
     */
    var size: (Temp172)?

    /**
     * Defines the controlled selected state of the card.
     *
     * @default false
     */
    var selected: Boolean?

    /**
     * Defines whether the card is initially in a selected state when rendered.
     *
     * @default false
     */
    var defaultSelected: Boolean?

    /**
     * Callback to be called when the selected state value changes.
     */
    var onSelectionChange: ((event: CardOnSelectionChangeEvent, data: CardOnSelectData) -> Unit)?
}
