// Generated by Karakum - do not modify it manually!

@file:JsModule("@fluentui/react-components")

package fluentui

import react.FC
import react.Provider
import react.Ref
import web.html.HTMLElement
import web.html.HTMLLIElement

external val FluentProvider: FC<FluentProviderProps>

external val Breadcrumb: FC<BreadcrumbProps>

/**
 * A button component which is used inside the Breadcrumb.
 */
external val BreadcrumbButton: FC<BreadcrumbButtonProps>

/**
 * Static CSS class names used internally for the component slots.
 */
external val breadcrumbButtonClassNames: SlotClassNames<BreadcrumbButtonSlots>

external val breadcrumbClassNames: SlotClassNames<BreadcrumbSlots>

/**
 * A divider component which is used inside the Breadcrumb
 */
external val BreadcrumbDivider: FC<BreadcrumbDividerProps>

external val breadcrumbDividerClassNames: SlotClassNames<BreadcrumbDividerSlots>

/**
 * BreadcrumbItem component is a wrapper for BreadcrumbLink and BreadcrumbButton.
 * It can be used as a non-interactive item.
 */
external val BreadcrumbItem: FC<BreadcrumbItemProps>

external val breadcrumbItemClassNames: SlotClassNames<BreadcrumbItemSlots>

/**
 * @internal
 */
external val BreadcrumbProvider: Provider<Required<BreadcrumbProps>?>

external val isTruncatableBreadcrumbContent: (content: String, maxLength: Double) -> Boolean

/**
 * Get the displayed items and overflowing items based on the array of BreadcrumbItems needed for Breadcrumb.
 *
 * @param options - Configure the partition options
 *
 * @returns Three arrays split into displayed items and overflow items based on maxDisplayedItems.
 */
external val partitionBreadcrumbItems: Function<Any?> /* <T>(options: PartitionBreadcrumbItemsOptions<T>) => PartitionBreadcrumbItems<T> */

external val truncateBreadcrumbLongName: (content: String, maxLength: Double? /* use undefined for default */) -> String

external val truncateBreadcrumLongTooltip: (content: String, maxLength: Double? /* use undefined for default */) -> String

/**
 * Apply styling to the BreadcrumbButton slots based on the state
 */
external val useBreadcrumbButtonStyles_unstable: (state: BreadcrumbButtonState) -> BreadcrumbButtonState

/**
 * @internal
 */
external val useBreadcrumbContext_unstable: () -> Required<BreadcrumbProps>

/**
 * Create the state required to render BreadcrumbDivider.
 *
 * The returned state can be modified with hooks such as useBreadcrumbDividerStyles_unstable,
 * before being passed to renderBreadcrumbDivider_unstable.
 *
 * @param props - props from this instance of BreadcrumbDivider
 * @param ref - reference to root HTMLElement of BreadcrumbDivider
 */
external val useBreadcrumbDivider_unstable: (props: BreadcrumbDividerProps, ref: Ref<HTMLLIElement>) -> BreadcrumbDividerState

/**
 * Apply styling to the BreadcrumbDivider slots based on the state
 */
external val useBreadcrumbDividerStyles_unstable: (state: BreadcrumbDividerState) -> BreadcrumbDividerState

/**
 * Create the state required to render BreadcrumbItem.
 *
 * The returned state can be modified with hooks such as useBreadcrumbItemStyles_unstable,
 * before being passed to renderBreadcrumbItem_unstable.
 *
 * @param props - props from this instance of BreadcrumbItem
 * @param ref - reference to root HTMLElement of BreadcrumbItem
 */
external val useBreadcrumbItem_unstable: (props: BreadcrumbItemProps, ref: Ref<HTMLLIElement>) -> BreadcrumbItemState

/**
 * Apply styling to the BreadcrumbItem slots based on the state
 */
external val useBreadcrumbItemStyles_unstable: (state: BreadcrumbItemState) -> BreadcrumbItemState

/**
 * Apply styling to the Breadcrumb slots based on the state
 */
external val useBreadcrumbStyles_unstable: (state: BreadcrumbState) -> BreadcrumbState

/* export {}; */


/**
 * A card provides scaffolding for hosting actions and content for a single topic.
 */
external val Card: ForwardRefComponent<CardProps>

/**
 * Static CSS class names used internally for the component slots.
 */
external val cardClassNames: SlotClassNames<CardSlots>

/**
 * CSS variable names used internally for uniform styling in Card.
 */
external val cardCSSVars: CardCSSVars

/**
 * Component to render Button actions in a Card component.
 */
external val CardFooter: ForwardRefComponent<CardFooterProps>

/**
 * Static CSS class names used internally for the component slots.
 */
external val cardFooterClassNames: SlotClassNames<CardFooterSlots>

/**
 * Component to render an image, text and an action in a Card component.
 */
external val CardHeader: ForwardRefComponent<CardHeaderProps>

/**
 * Static CSS class names used internally for the component slots.
 */
external val cardHeaderClassNames: SlotClassNames<CardHeaderSlots>

/**
 * CSS variable names used internally for uniform styling in CardHeader.
 */
external val cardHeaderCSSVars: CardHeaderCSSVars

/**
 * Component to render image previews of documents or articles in a Card component.
 */
external val CardPreview: ForwardRefComponent<CardPreviewProps>

/**
 * Static CSS class names used internally for the component slots.
 */
external val cardPreviewClassNames: SlotClassNames<CardPreviewSlots>

/**
 * @internal
 */
external val CardProvider: Provider<CardContextValue?>

/**
 * Text preset component for the Body1 typography variant
 */
external val Body1: FC<TextPresetProps>

external val body1ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Body1Strong typography variant
 */
external val Body1Strong: FC<TextPresetProps>

external val body1StrongClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Body1Stronger typography variant
 */
external val Body1Stronger: FC<TextPresetProps>

external val body1StrongerClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Body2 typography variant
 */
external val Body2: FC<TextPresetProps>

external val body2ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Caption1 typography variant
 */
external val Caption1: FC<TextPresetProps>

external val caption1ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Caption1Strong typography variant
 */
external val Caption1Strong: FC<TextPresetProps>

external val caption1StrongClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Caption1Stronger typography variant
 */
external val Caption1Stronger: FC<TextPresetProps>

external val caption1StrongerClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Caption2 typography variant
 */
external val Caption2: FC<TextPresetProps>

external val caption2ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Caption2Strong typography variant
 */
external val Caption2Strong: FC<TextPresetProps>

external val caption2StrongClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Display typography variant
 */
external val Display: FC<TextPresetProps>

external val displayClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Large Title typography variant
 */
external val LargeTitle: FC<TextPresetProps>

external val largeTitleClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Subtitle1 typography variant
 */
external val Subtitle1: FC<TextPresetProps>

external val subtitle1ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Subtitle2 typography variant
 */
external val Subtitle2: FC<TextPresetProps>

external val subtitle2ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Subtitle2Stronger typography variant
 */
external val Subtitle2Stronger: FC<TextPresetProps>

external val subtitle2StrongerClassNames: SlotClassNames<TextSlots>

/**
 * Typography and styling abstraction component used to ensure consistency of text.
 */
external val Text_2: ForwardRefComponent<TextProps>

/* export { Text_2 as Text }; */

external val textClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Title 1 typography variant
 */
external val Title1: FC<TextPresetProps>

external val title1ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Title 2 typography variant
 */
external val Title2: FC<TextPresetProps>

external val title2ClassNames: SlotClassNames<TextSlots>

/**
 * Text preset component for the Title 3 typography variant
 */
external val Title3: FC<TextPresetProps>

external val title3ClassNames: SlotClassNames<TextSlots>

/**
 * Create the state required to render Text.
 *
 * The returned state can be modified with hooks such as useTextStyles_unstable,
 * before being passed to renderText_unstable.
 *
 * @param props - props from this instance of Text
 * @param ref - reference to root HTMLElement of Text
 */
external val useText_unstable: (props: TextProps, ref: Ref<HTMLElement>) -> TextState

/**
 * Apply styling to the Text slots based on the state
 */
external val useTextStyles_unstable: (state: TextState) -> TextState